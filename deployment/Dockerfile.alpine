# Multi-stage build for Rust Lavalink (Alpine variant)
FROM rust:1.70-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    opus-dev \
    ffmpeg-dev \
    curl

# Set working directory
WORKDIR /build

# Copy Cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./

# Create dummy main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies (this layer will be cached)
RUN cargo build --release --target x86_64-unknown-linux-musl && rm -rf src

# Copy source code
COPY src ./src
COPY tests ./tests

# Build the actual application
RUN cargo build --release --target x86_64-unknown-linux-musl

# Runtime stage
FROM alpine:3.18

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    openssl \
    opus \
    ffmpeg \
    python3 \
    py3-pip \
    curl

# Install yt-dlp for audio source extraction
RUN pip3 install --no-cache-dir yt-dlp

# Create non-root user
RUN addgroup -g 322 lavalink && \
    adduser -D -u 322 -G lavalink lavalink

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /build/target/x86_64-unknown-linux-musl/release/lavalink-rust /app/lavalink-rust

# Create necessary directories
RUN mkdir -p /app/logs /app/plugins && \
    chown -R lavalink:lavalink /app

# Switch to non-root user
USER lavalink

# Expose ports
EXPOSE 2333 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:2333/v4/info || exit 1

# Default command
ENTRYPOINT ["/app/lavalink-rust"]
CMD ["--config", "/app/application.yml"]
